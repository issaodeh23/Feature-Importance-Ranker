
line1_families = {
    '283':'G',
    '345':'G',
    '364':'G',
    '374':'G',
    '388':'G',
    '3001':'G',
    '3002':'G',
    '3060':'G',
    '3064':'G',
    '3065':'G',
    '3066':'G',
    '3077':'G',
    '3083':'G',
    '3085':'G',
    '3088':'G',
    '3091':'G',
    '3092':'G',
    '5080':'S',
    '5423':'S',
    '5467':'S',
    '5653':'S',
    '7063':'S',
    '7210':'S',
    '7211':'S',
    '7230':'S',
    '7236':'S',
    '7252':'S',
    '7254':'S',
    '7260':'S',
    '7261':'S',
    '7310':'S',
    '7326':'S',
    '7332':'S',
    '7333':'S',
    '7352':'P',
    '7368':'A',
    '7389':'C',
    '7391':'C',
    '7408':'A',
    '7423':'S',
    '7442':'S',
    '7444':'F',
    '7445':'S',
    '7453':'B',
    '7462':'B',
    '7463':'B',
    '7464':'B',
    '7469':'B',
    '7470':'S',
    '7471':'B',
    '7482':'B',
    '7483':'S',
    '7497':'A',
    '7498':'A',
    '7509':'S',
    '7516':'S',
    '7529':'B',
    '7532':'Dummy pattern',
    '7575':'S',
    '7576':'S',
    '7592':'S',
    '7600':'C',
    '7604':'S',
    '7628':'S',
    '7629':'B',
    '7642':'B',
    '7644':'C',
    '7646':'N',
    '7647':'B',
    '7650':'C',
    '7651':'C',
    '7655':'C',
    '7663':'A',
    '7665':'S',
    '7666':'S',
    '7683':'S',
    '7691':'S',
    '7693':'S',
    '7694':'S',
    '7708':'S',
    '7710':'B',
    '7711':'B',
    '7737':'C',
    '7741':'F',
    '7746':'C',
    '7754':'P',
    '7755':'P',
    '7759':'F',
    '7760':'C',
    '7761':'C',
    '7773':'C',
    '7791':'C',
    '7793':'F',
    '7799':'S',
    '7807':'C',
    '7808':'C',
    '7809':'S',
    '7813':'N',
    '7834':'C',
    '7839':'P',
    '7840':'P',
    '7856':'N',
    '7866':'N',
    '7869':'B',
    '7873':'F',
    '7880':'B',
    '7886':'C',
    '7892':'B',
    '7904':'P',
    '7905':'P',
    '7906':'N',
    '7913':'N',
    '7935':'C',
    '7946':'F',
    '7958':'S',
    '7961':'S',
    '7962':'S',
    '7965':'S',
    '7974':'C',
    '8009':'B',
    '8011':'S',
    '8012':'S',
    '8013':'S',
    '8036':'B',
    '8042':'P',
    '8043':'P',
    '8044':'B',
    '8051':'B',
    '8052':'S',
    '8054':'F',
    '8055':'P',
    '8058':'C',
    '8061':'N',
    '8066':'B',
    '8067':'B',
    '8072':'N',
    '8074':'F',
    '8089':'G',
    '8090':'G',
    '8104':'S',
    '8106':'C',
    '8107':'C',
    '8108':'F',
    '8109':'C',
    '8110':'F',
    '8111':'S',
    '8112':'S',
    '8113':'S',
    '8114':'S',
    '8115':'F',
    '8124':'S',
    '8125':'S',
    '8127':'S',
    '8128':'S',
    '8129':'B',
    '8135':'C',
    '20113':'G',
    '20115':'G',
    '20129':'G',
    '25146':'Dummy pattern'
    }

line2_families = {
    '3064':'G',
    '3065':'G',
    '3077':'G',
    '3081':'G',
    '3091':'G',
    '7211':'S',
    '7236':'S',
    '7239':'S',
    '7254':'S',
    '7304':'B',
    '7332':'S',
    '7333':'S',
    '7352':'P',
    '7373':'S',
    '7389':'C',
    '7404':'F',
    '7408':'A',
    '7422':'A',
    '7423':'S',
    '7436':'S',
    '7440':'S',
    '7442':'S',
    '7463':'B',
    '7468':'B',
    '7469':'B',
    '7471':'B',
    '7482':'B',
    '7516':'S',
    '7530':'B',
    '7532':'Dummy pattern',
    '7592':'S',
    '7604':'S',
    '7642':'B',
    '7644':'C',
    '7646':'N',
    '7647':'B',
    '7650':'C',
    '7651':'C',
    '7655':'C',
    '7663':'A',
    '7684':'S',
    '7691':'S',
    '7693':'S',
    '7695':'S',
    '7705':'C',
    '7708':'S',
    '7710':'B',
    '7737':'C',
    '7741':'F',
    '7746':'C',
    '7754':'P',
    '7755':'P',
    '7760':'C',
    '7761':'C',
    '7764':'C',
    '7767':'C',
    '7771':'F',
    '7773':'C',
    '7791':'C',
    '7793':'F',
    '7807':'C',
    '7808':'C',
    '7809':'S',
    '7813':'N',
    '7817':'S',
    '7856':'N',
    '7866':'N',
    '7873':'F',
    '7880':'B',
    '7886':'C',
    '7889':'S',
    '7892':'B',
    '7904':'P',
    '7906':'N',
    '7912':'N',
    '7913':'N',
    '7916':'A',
    '7922':'B',
    '7923':'B',
    '7932':'B',
    '7933':'S',
    '7934':'C',
    '7935':'C',
    '7938':'P',
    '7939':'P',
    '7943':'N',
    '7946':'F',
    '7955':'A',
    '7958':'S',
    '7961':'S',
    '7962':'S',
    '7963':'S',
    '7974':'C',
    '7995':'B',
    '8003':'B',
    '8011':'S',
    '8012':'S',
    '8013':'S',
    '8014':'S',
    '8032':'S',
    '8033':'S',
    '8036':'B',
    '8042':'P',
    '8043':'P',
    '8044':'B',
    '8045':'B',
    '8051':'B',
    '8052':'S',
    '8054':'F',
    '8055':'P',
    '8058':'C',
    '8061':'N',
    '8062':'C',
    '8066':'B',
    '8072':'N',
    '8074':'F',
    '8096':'G',
    '8101':'G',
    '8104':'S',
    '8106':'C',
    '8107':'C',
    '8108':'F',
    '8109':'C',
    '8110':'F',
    '8114':'S',
    '8115':'F',
    '8124':'S',
    '8127':'S',
    '8128':'S',
    '8129':'B',
    '20115':'G',
    '25006':'Unknown',
}

import pandas as pd

abb = [
    "ABB.ATAS.C",
    "ABB.ATAS.Si",
    "ABB.laddle_event.ladle_event_tap_temperature",
    "ABB.progelta.Weight_REAL_Cu",
    "ABB.progelta.Weight_REAL_Fe",
    "ABB.progelta.Weight_REAL_Mg",
    "ABB.progelta.mapped_ABB_laddle_event_weight"
    ]
moulding = [
    "moulding.CIM3Data.blow_off_in_operation_3_swing_plate_bottom_stop",
    "moulding.CIM3Data.blow_off_in_operation_3_swing_plate_front_stop",
    "moulding.CIM3Data.blow_off_in_operation_6_swing_plate_bottom_start",
    "moulding.CIM3Data.blow_off_in_operation_6_swing_plate_bottom_stop",
    # "moulding.CIM3Data.blow_off_in_operation_6_swing_plate_front_start", Highly correlated to 3_swing_plate_front_stop
    "moulding.CIM3Data.closeup_correction",
    "moulding.CIM3Data.closeup_force",
    "moulding.CIM3Data.compressibility_minimum_set",
    "moulding.CIM3Data.core_set_mode",
    "moulding.CIM3Data.core_setter_core_set_force_stage_3",
    "moulding.CIM3Data.core_setter_core_set_time_stage_3",
    # "moulding.CIM3Data.core_setter_core_setting_correction_stage_3", Highly correlated to set_time_stage_3
    "moulding.CIM3Data.core_setter_core_speed_forward_stage_2",
    # "moulding.CIM3Data.core_setter_core_speed_in_with_cores", Highly correlated to peed_forward_stage_2
    "moulding.CIM3Data.core_setter_core_strip_acceleration_stage_5",
    "moulding.CIM3Data.core_setter_core_strip_distance_stage_5",
    # "moulding.CIM3Data.core_setter_core_strip_time_stage_4", Highly correlated to setting_correction_stage_3
    "moulding.CIM3Data.core_setter_stage1_and_2_overlap",
    # "moulding.CIM3Data.core_setter_stage5_and_6_overlap", Highly correlated to stage1_and_2_overlap
    "moulding.CIM3Data.cycle_time_minimum_set",
    "moulding.CIM3Data.mould_delivery_position_correction",
    "moulding.CIM3Data.mould_position_in_chamber_correction",
    "moulding.CIM3Data.mould_retainer_pressure",
    "moulding.CIM3Data.mould_retainer_time_extension",
    "moulding.CIM3Data.mould_thickness_correction",
    "moulding.CIM3Data.moulding_machine_core_setter_overlap_operation_3_and_6",
    "moulding.CIM3Data.moulding_machine_overlap_operation_3_and_4",
    "moulding.CIM3Data.moulding_machine_overlap_operation_5_and_6",
    "moulding.CIM3Data.moulding_machine_overlap_operation_6_and_1",
    "moulding.CIM3Data.operation_3a_end_position_correction",
    "moulding.CIM3Data.sand_level_in_sand_hopper",
    "moulding.CIM3Data.sand_shot_pressure",
    "moulding.CIM3Data.sand_shot_time_correction",
    "moulding.CIM3Data.spray_frequency",
    "moulding.CIM3Data.spray_time",
    "moulding.CIM3Data.squeeze_extension_time",
    "moulding.CIM3Data.squeeze_plate_stripping_acceleration",
    "moulding.CIM3Data.squeeze_plate_stripping_distance",
    "moulding.CIM3Data.squeeze_plate_temperature",
    "moulding.CIM3Data.squeeze_pressure",
    "moulding.CIM3Data.squeeze_speed",
    "moulding.CIM3Data.swing_plate_spray_position",
    "moulding.CIM3Data.swing_plate_strip_acceleration",
    "moulding.CIM3Data.swing_plate_stripping_distance",
    "moulding.CIM3Data.swing_plate_temperature",
    # "moulding.CIM3Data.vacuum_level_with_cores_in_core_mask", # Highly correlated to setting_correction_stage_3
    "moulding.CIM3Mould.compressibility_actual",
    "moulding.CIM3Mould.cycle_time",
    "moulding.CIM3Mould.mould_thickness"
    ]
pouring = [
    "pouring.ARL.Al",
    "pouring.ARL.Cu",
    # "pouring.ARL.Cu_equ",
    "pouring.ARL.Mg",
    "pouring.ARL.S",
    "pouring.ARL.Si",
    "pouring.ARL.Ti",
    "pouring.ASEA.Temperature_REAL_median",
    "pouring.ATASW.C",
    "pouring.ATASW.Si_equivalent"
    ]

sand_plant = [
    "sand_plant.Sand_Mixer.Compactability_mean_value",
    "sand_plant.Sand_Mixer.Correction_moisture",
    # "sand_plant.Sand_Mixer.Desired_moisture_calc", # Highly correlated to Correction_moisture
    "sand_plant.Sand_Mixer.Moisture_return_sand",
    "sand_plant.Sand_Mixer.S1C1_Act_return_sand",
    "sand_plant.Sand_Mixer.S3C1_Act_water",
    "sand_plant.Sand_Mixer.Shearing_strength_mean_value",
    "sand_plant.Sand_Mixer.Temperature_return_sand",
    "sand_plant.Sand_Mixer.bentonite_and_coal_dust_mix_additions",
    ]

scrap = [
    "QM_database.cast_scrap_rate",
    "QM_database.sand_scrap_rate",
    "QM_database.scope_scrap_rate"
    ]
# cols = abb + moulding + pouring + sand_plant + scrap
# df = pd.read_parquet("/Users/annaopperman/repos/prescribe-condals/condals/feature_importance/uv_line1.parquet")
# df = df[cols+['uv_batch_info.cim_batch.pattern_number']]
# print(df.shape)
#df.to_parquet("/Users/annaopperman/repos/prescribe-condals/condals/feature_importance/2025_interns_uv_line1.parquet")



def get_alphabetical_family(batch_number,line = line1_families):
    new_batch_number = str(batch_number)

    if new_batch_number in line:
        return line[new_batch_number]
    else:
        raise KeyError(f"Batch number {new_batch_number} not found in line families.")



# useful_set = set()
# for k,v in line1_families.items():
#     if v in useful_set:
#         continue
#     else:
#         useful_set.add(v)
# print(len(useful_set))
